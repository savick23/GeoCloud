@page "/catalog/{name?}"
@namespace RmSolution.Web
@inherits RmPageBase
<PageTitle>Справочник «@(_info?.Name ?? string.Empty)»</PageTitle>

<RadzenText TextStyle="TextStyle.H5">Справочник «@(_info?.Name ?? string.Empty)»</RadzenText>

@if (_data == null)
{
    <p><em>Загрузка данных...</em></p>
}
else
{
    <RadzenMenu Click="OnMenuCick">
        <RadzenMenuItem Text="Новый" Icon="add" Value=CMD_NEW Visible=@(_state == ActionState.Select) />
        <RadzenMenuItem Text="Копировать" Icon="content_copy" Value=CMD_COPY Visible=@(_state == ActionState.Select) />
        <RadzenMenuItem Text="Изменить" Icon="edit" Value=CMD_EDIT Visible=@(_state == ActionState.Select) />
        <RadzenMenuItem Text="Удалить" Icon="delete" Value=CMD_DELETE Visible=@(_state == ActionState.Select) />
        <RadzenMenuItem Text="Применить" Icon="check" Value=CMD_APPLY Visible=@(_state > ActionState.Select) />
        <RadzenMenuItem Text="Отменить" Icon="close" Value=CMD_CANCEL Visible=@(_state > ActionState.Select) />
    </RadzenMenu>
    <RadzenDataGrid @ref="_details" TItem="object" Data="@_data" Density="Density.Compact" AllowColumnResize="true"
                EditMode="DataGridEditMode.Single"
                SelectionMode="DataGridSelectionMode.Single"
                RowCreate="@OnInsertRow" RowUpdate="@OnUpdateRow" @bind-Value=@_selectedRows>
        <Columns>
            @foreach (var col in _info.Attributes.Where(a => a.Visible))
            {
                <RadzenDataGridColumn TItem="object" Title="@col.Name" Property="@col.Field">
                    <Template Context="row">
                        @GetValue(row, col.Field)
                    </Template>
                    <EditTemplate Context="row">
                        @if (col.IsReference)
                        {
                            <RadzenDropDown TValue="TRefType?" Data=@RefData(col) Value=@(GetValueEdit(row, col.Field))
                                ValueProperty="Id" TextProperty="Name"
                                ValueChanged=@(e => OnValueChanged(row, col.Field, e))
                                Style="width:100%;" />
                        }
                        else
                        {
                            <RadzenTextBox Value=@(GetValueEdit(row, col.Field)) ValueChanged=@(e => OnValueChanged(row, col.Field, e)) />
                        }
                    </EditTemplate>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter]
    public string? Name { get; set; }

    ActionState _state;
    RadzenDataGrid<object> _details;
    IList<object>? _selectedRows;
    TObjectDto? _info;
    IEnumerable<object>? _data;
    object? _origin;

    protected override async Task OnParametersSetAsync()
    {
        _info = await Client.GetObjectAsync(Name);
        _data = (IEnumerable<object>?)await Client.GetDataAsync(Name);
        if (_data?.Count() > 0) _selectedRows = new List<object>() { _data.First() };
        StateHasChanged();
    }

    async void OnMenuCick(MenuItemEventArgs args)
    {
        var item = _selectedRows?.FirstOrDefault();
        switch ((string)args.Value)
        {
            case CMD_NEW:
                _state = ActionState.New;
                await _details.InsertRow(await Client.NewItemAsync(_info));
                break;
            case CMD_COPY:
                if (item != null)
                {
                }
                break;
            case CMD_EDIT:
                if (item != null)
                {
                    _state = ActionState.Edit;
                    _origin = ((ICloneable?)item)?.Clone();
                    await _details.EditRow(item);
                }
                break;
            case CMD_DELETE:
                if (item != null)
                {
                }
                break;
            case CMD_APPLY:
                _state = ActionState.Select;
                await _details.UpdateRow(item);
                break;
            case CMD_CANCEL:
                _state = ActionState.Select;
                _details.CancelEditRow(item);
                Cancel(item, _origin);
                break;
        }
    }

    async Task OnInsertRow(object? item)
    {
        await Client.UpdateAsync(item);
        StateHasChanged();
    }

    async Task OnUpdateRow(object? item) =>
        await Client.UpdateAsync(item);

    void OnDeleteRow(object? item)
    {
    }
}
